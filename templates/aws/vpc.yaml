{{- if .Values.providers.aws.enabled }}

apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xvpcs.aws.livewyer.io
spec:
  group: aws.livewyer.io
  names:
    kind: XVPC
    plural: xvpcs
  claimNames:
      kind: VPC
      plural: vpcs
  versions:
    - name: v1alpha1
      served: true
      referenceable: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                deletionPolicy:
                  type: string
                  enum:
                    - Delete
                    - Orphan
                  default: Delete
                managementPolicies:
                  type: array
                  items:
                    type: string
                    enum:
                      - Create
                      - Update
                      - Observe
                      - Delete
                  default: ["Create", "Update", "Observe", "Delete"]
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                vpc:
                  type: object
                  properties:
                    region:
                      type: string
                    assignGeneratedIpv6CidrBlock:
                      type: boolean
                      default: false
                    cidrBlock:
                      type: string
                      default: 10.0.0.0/16
                    additionalCidrBlocks:
                      type: array
                      items:
                        type: string
                    enableDnsHostnames:
                      type: boolean
                      default: true
                    enableDnsSupport:
                      type: boolean
                      default: true
                    enableNetworkAddressUsageMetrics:
                      type: boolean
                      default: true
                    instanceTenancy:
                      type: string
                      default: default
                    ipv6CidrBlock:
                      type: string
                    subnets:
                      type: array
                      items:
                        type: object
                        properties:
                          availabilityZone:
                            type: string
                          cidrBlock:
                            type: string
                          mapPublicIpOnLaunch:
                            type: boolean
                            default: false
                          type:
                            type: string
                            default: public
                            enum:
                              - public
                              - private
                              - intra
                          attachNatGateway:
                            type: boolean
                            default: false
                        required:
                          - availabilityZone
                          - cidrBlock
                    endpoints:
                      type: array
                      items:
                        type: object
                        properties:
                          serviceName:
                            type: string
                          vpcEndpointType:
                            type: string
                            default: "Interface"
                            enum: ["Interface", "Gateway"]
                          serviceNamePrefix:
                            type: string
                            default: "com.amazonaws"
                        required:
                          - serviceName
                      default:
                        - serviceName: ec2
                        - serviceName: ebs
                        - serviceName: eks
                        - serviceName: eks-auth
                        - serviceName: elasticloadbalancing
                        - serviceName: kms
                        - serviceName: s3
                          vpcEndpointType: Gateway
                        - serviceName: ssm
                        - serviceName: ssmmessages
                        - serviceName: sts
                        - serviceName: autoscaling
                        - serviceName: backup
                        - serviceName: dynamodb
                        - serviceName: elasticache
                        - serviceName: elasticfilesystem
                        - serviceName: elasticfilesystem-fips
                        - serviceName: grafana
                        - serviceName: outposts
                        - serviceName: rds
                        - serviceName: rds-data
                        - serviceName: secretsmanager
                        - serviceName: tagging
                  required:
                    - region
                    - cidrBlock
                    - subnets
                tags:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
              required:
                - vpc
            status:
              type: object
              properties:
                vpcId:
                  type: string
                subnetIds:
                  type: array
                  items:
                    type: string
                publicSubnetIds:
                  type: array
                  items:
                    type: string
                privateSubnetIds:
                  type: array
                  items:
                    type: string
                intraSubnetIds:
                  type: array
                  items:
                    type: string

---

apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: vpc.aws.livewyer.io
spec:
  compositeTypeRef:
    apiVersion: aws.livewyer.io/v1alpha1
    kind: XVPC
  mode: Pipeline
  pipeline:
    - step: go-templating
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            {{`
            {{- $endpoints := list }}
            {{- $endpoints = append $endpoints (dict "serviceName" "ec2") }}
            {{- $endpoints = append $endpoints (dict "serviceName" "ebs") }}
            {{- $endpoints = append $endpoints (dict "serviceName" "eks") }}
            {{- $endpoints = append $endpoints (dict "serviceName" "eks-auth") }}
            {{- $endpoints = append $endpoints (dict "serviceName" "elasticloadbalancing") }}
            {{- $endpoints = append $endpoints (dict "serviceName" "kms") }}
            {{- $endpoints = append $endpoints (dict "serviceName" "s3" "vpcEndpointType" "Gateway") }}
            {{- $endpoints = append $endpoints (dict "serviceName" "ssm") }}
            {{- $endpoints = append $endpoints (dict "serviceName" "ssmmessages") }}
            {{- $endpoints = append $endpoints (dict "serviceName" "sts") }}
            {{- $endpoints = append $endpoints (dict "serviceName" "autoscaling") }}
            {{- $endpoints = append $endpoints (dict "serviceName" "backup") }}
            {{- $endpoints = append $endpoints (dict "serviceName" "dynamodb") }}
            {{- $endpoints = append $endpoints (dict "serviceName" "elasticache") }}
            {{- $endpoints = append $endpoints (dict "serviceName" "elasticfilesystem") }}
            {{- $endpoints = append $endpoints (dict "serviceName" "elasticfilesystem-fips") }}
            {{- $endpoints = append $endpoints (dict "serviceName" "grafana") }}
            {{- $endpoints = append $endpoints (dict "serviceName" "outposts") }}
            {{- $endpoints = append $endpoints (dict "serviceName" "rds") }}
            {{- $endpoints = append $endpoints (dict "serviceName" "rds-data") }}
            {{- $endpoints = append $endpoints (dict "serviceName" "secretsmanager") }}
            {{- $endpoints = append $endpoints (dict "serviceName" "tagging") }}

            {{ $id := .observed.composite.resource.metadata.name }}
            {{ $spec := .observed.composite.resource.spec }}

            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: VPC
            metadata:
              labels:
                aws.livewyer.io/vpc: {{ $id }}
              annotations:
                {{ setResourceNameAnnotation ("vpc") }}
            spec:
              deletionPolicy: {{ $spec.deletionPolicy }}
              providerConfigRef:
                name: {{ $spec.providerConfigRef.name }}
              forProvider:
                region: {{ $spec.vpc.region }}
                cidrBlock: {{ $spec.vpc.cidrBlock }}
                enableDnsHostnames: {{ $spec.vpc.enableDnsHostnames | default true }}
                enableDnsSupport: {{ $spec.vpc.enableDnsSupport | default true }}
                assignGeneratedIpv6CidrBlock: {{ $spec.vpc.assignGeneratedIpv6CidrBlock | default false }}
                enableNetworkAddressUsageMetrics: {{ $spec.vpc.enableNetworkAddressUsageMetrics | default true }}
                {{- if $spec.vpc.ipv6CidrBlock }}
                ipv6CidrBlock: {{ $spec.vpc.ipv6CidrBlock }}
                {{- end }}
                tags:
                  Name: {{ $id }}
                  {{- if $spec.tags }}
                  {{ $spec.tags | toYaml | indent 6 }}
                  {{- end }}

            ---
            {{- if hasKey $spec.vpc "additionalCidrBlocks" }}
            {{- range $i, $cidr := $spec.vpc.additionalCidrBlocks }}

            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: VPCIPv4CidrBlockAssociation
            metadata:
              labels:
                aws.livewyer.io/vpc: {{ $id }}
              annotations:
                {{ setResourceNameAnnotation ("cidr") }}
            spec:
              deletionPolicy: {{ $spec.deletionPolicy }}
              providerConfigRef:
                name: {{ $spec.providerConfigRef.name }}
              forProvider:
                region: {{ $spec.vpc.region }}
                cidrBlock: {{ $cidr }}
                vpcIdSelector:
                  matchControllerRef: true

            ---
            {{- end }}
            {{- end }}

            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: InternetGateway
            metadata:
              labels:
                aws.livewyer.io/vpc: {{ $id }}
              annotations:
                {{ setResourceNameAnnotation ("igw") }}
            spec:
              deletionPolicy: {{ $spec.deletionPolicy }}
              providerConfigRef:
                name: {{ $spec.providerConfigRef.name }}
              forProvider:
                vpcIdSelector:
                  matchControllerRef: true
                region: {{ $spec.vpc.region }}
                tags:
                  Name: {{ $id }}
                  {{- if $spec.tags }}
                  {{ $spec.tags | toYaml | indent 6 }}
                  {{- end }}

            ---
            {{- range $i, $subnet := $spec.vpc.subnets }}

            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: Subnet
            metadata:
              name: {{ $id }}-{{ $subnet.availabilityZone }}-{{ $subnet.type }}
              labels:
                aws.livewyer.io/vpc: {{ $id }}
                availabilityZone: {{ $subnet.availabilityZone }}
                subnetType: {{ $subnet.type }}
              annotations:
                {{ setResourceNameAnnotation (printf "subnet-%s-%s" $subnet.type $subnet.availabilityZone) }}
            spec:
              deletionPolicy: {{ $spec.deletionPolicy }}
              providerConfigRef:
                name: {{ $spec.providerConfigRef.name }}
              forProvider:
                region: {{ $spec.vpc.region }}
                availabilityZone: {{ $subnet.availabilityZone }}
                cidrBlock: {{ $subnet.cidrBlock }}
                {{- if or (eq $subnet.type "public") (eq $subnet.mapPublicIpOnLaunch true) }}
                mapPublicIpOnLaunch: true
                {{- end }}
                vpcIdSelector:
                  matchControllerRef: true
                tags:
                  Name: {{ $id }}-{{ $subnet.type }}-{{ $subnet.availabilityZone }}
                  {{- if eq $subnet.type "public" }}
                  kubernetes.io/role/elb: "1"
                  {{- else if eq $subnet.type "private" }}
                  kubernetes.io/role/internal-elb: "1"
                  {{- end }}
                  {{- if $spec.tags }}
                  {{ $spec.tags | toYaml | indent 6 }}
                  {{- end }}

            ---

            {{- if or (eq $subnet.type "private") (eq $subnet.attachNatGateway true) }}

            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: EIP
            metadata:
              name: {{ $id }}-{{ $subnet.availabilityZone }}
              labels:
                aws.livewyer.io/vpc: {{ $id }}
                subnetType: {{ $subnet.type }}
                availabilityZone: {{ $subnet.availabilityZone }}
              annotations:
                {{ setResourceNameAnnotation (printf "eip-%s-%s" $subnet.type $subnet.availabilityZone) }}
            spec:
              deletionPolicy: {{ $spec.deletionPolicy }}
              providerConfigRef:
                name: {{ $spec.providerConfigRef.name }}
              forProvider:
                region: {{ $spec.vpc.region }}
                tags:
                  Name: {{ $id }}
                  subnetType: {{ $subnet.type }}
                  availabilityZone: {{ $subnet.availabilityZone }}
                  {{- if $spec.tags }}
                  {{ $spec.tags | toYaml | indent 6 }}
                  {{- end }}

            ---

            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: NATGateway
            metadata:
              name: {{ $id }}-{{ $subnet.availabilityZone }}
              labels:
                aws.livewyer.io/vpc: {{ $id }}
                subnetType: {{ $subnet.type }}
                availabilityZone: {{ $subnet.availabilityZone }}
              annotations:
                {{ setResourceNameAnnotation (printf "natgw-%s-%s" $subnet.type $subnet.availabilityZone) }}
            spec:
              deletionPolicy: {{ $spec.deletionPolicy }}
              providerConfigRef:
                name: {{ $spec.providerConfigRef.name }}
              forProvider:
                region: {{ $spec.vpc.region }}
                subnetIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    subnetType: {{ $subnet.type }}
                    availabilityZone: {{ $subnet.availabilityZone }}
                connectivityType: public
                allocationIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    subnetType: {{ $subnet.type }}
                    availabilityZone: {{ $subnet.availabilityZone }}
                tags:
                  Name: {{ $id }}-{{ $subnet.availabilityZone }}
                  subnetType: {{ $subnet.type }}
                  availabilityZone: {{ $subnet.availabilityZone }}
                  {{- if $spec.tags }}
                  {{ $spec.tags | toYaml | indent 6 }}
                  {{- end }}

            ---
            {{- end }}

            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: RouteTable
            metadata:
              {{- if or (eq $subnet.type "private") (eq $subnet.attachNatGateway true) }}
              name: {{ $id }}-{{ $subnet.availabilityZone }}-{{ $subnet.type }}
              labels:
                aws.livewyer.io/vpc: {{ $id }}
                subnetType: {{ $subnet.type }}
                availabilityZone: {{ $subnet.availabilityZone }}
              annotations:
                {{ setResourceNameAnnotation (printf "rt-%s-%s" $subnet.type $subnet.availabilityZone) }}
              {{- else }}
              name: {{ $id }}-{{ $subnet.type }}
              labels:
                aws.livewyer.io/vpc: {{ $id }}
                subnetType: {{ $subnet.type }}
              annotations:
                {{ setResourceNameAnnotation (printf "rt-%s" $subnet.type) }}
              {{- end }}
            spec:
              deletionPolicy: {{ $spec.deletionPolicy }}
              providerConfigRef:
                name: {{ $spec.providerConfigRef.name }}
              forProvider:
                vpcIdSelector:
                  matchControllerRef: true
                region: {{ $spec.vpc.region }}
                tags:
                  Name: {{ $id }}-{{ $subnet.type }}
                  subnetType: {{ $subnet.type }}
                  {{- if or (eq $subnet.type "private") (eq $subnet.attachNatGateway true) }}
                  availabilityZone: {{ $subnet.availabilityZone }}
                  {{- end }}
                  {{- if $spec.tags }}
                  {{ $spec.tags | toYaml | indent 6 }}
                  {{- end }}

            ---
            {{- if or (eq $subnet.type "private") (eq $subnet.attachNatGateway true) }}

            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: Route
            metadata:
              name: {{ $id }}-{{ $subnet.type }}-{{ $subnet.availabilityZone }}
              labels:
                aws.livewyer.io/vpc: {{ $id }}
                subnetType: {{ $subnet.type }}
                availabilityZone: {{ $subnet.availabilityZone }}
              annotations:
                {{ setResourceNameAnnotation (printf "route-%s-%s" $subnet.type $subnet.availabilityZone) }}
            spec:
              deletionPolicy: {{ $spec.deletionPolicy }}
              providerConfigRef:
                name: {{ $spec.providerConfigRef.name }}
              forProvider:
                region: {{ $spec.vpc.region }}
                destinationCidrBlock: 0.0.0.0/0
                natGatewayIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    subnetType: {{ $subnet.type }}
                    availabilityZone: {{ $subnet.availabilityZone }}
                routeTableIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    subnetType: {{ $subnet.type }}
                    availabilityZone: {{ $subnet.availabilityZone }}

            ---
            {{- else if eq $subnet.type "public" }}

            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: Route
            metadata:
              name: {{ $id }}-{{ $subnet.type }}
              labels:
                aws.livewyer.io/vpc: {{ $id }}
                subnetType: {{ $subnet.type }}
              annotations:
                {{ setResourceNameAnnotation (printf "route-%s" $subnet.type) }}
            spec:
              deletionPolicy: {{ $spec.deletionPolicy }}
              providerConfigRef:
                name: {{ $spec.providerConfigRef.name }}
              forProvider:
                region: {{ $spec.vpc.region }}
                destinationCidrBlock: 0.0.0.0/0
                gatewayIdSelector:
                  matchControllerRef: true
                routeTableIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    subnetType: {{ $subnet.type }}

            ---
            {{- end }}

            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: RouteTableAssociation
            metadata:
              name: {{ $id }}-{{ $subnet.type }}-{{ $subnet.availabilityZone }}
              labels:
                aws.livewyer.io/vpc: {{ $id }}
              annotations:
                {{ setResourceNameAnnotation (printf "rta-%s-%s" $subnet.type $subnet.availabilityZone) }}
            spec:
              deletionPolicy: {{ $spec.deletionPolicy }}
              providerConfigRef:
                name: {{ $spec.providerConfigRef.name }}
              forProvider:
                region: {{ $spec.vpc.region }}
                {{- if or (eq $subnet.type "private") (eq $subnet.attachNatGateway true) }}
                routeTableIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    subnetType: {{ $subnet.type }}
                    availabilityZone: {{ $subnet.availabilityZone }}
                {{- else }}
                routeTableIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    subnetType: {{ $subnet.type }}
                {{- end }}
                subnetIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    subnetType: {{ $subnet.type }}
                    availabilityZone: {{ $subnet.availabilityZone }}

            ---
            {{- end }}
            {{- range $i, $endpoint := default $endpoints $spec.endpoints }}

            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: VPCEndpoint
            metadata:
              name: {{ $id }}-{{ $endpoint.serviceName }}
              labels:
                aws.livewyer.io/vpc: {{ $id }}
                vpcEndpoint: {{ $endpoint.serviceName }}
              annotations:
                {{ setResourceNameAnnotation (printf "vpce-%s" $endpoint.serviceName) }}
            spec:
              deletionPolicy: {{ $spec.deletionPolicy }}
              providerConfigRef:
                name: {{ $spec.providerConfigRef.name }}
              forProvider:
                region: {{ $spec.vpc.region }}
                serviceName: {{ printf "%s.%s.%s" (default "com.amazonaws" $endpoint.serviceNamePrefix) $spec.vpc.region $endpoint.serviceName }}
                vpcEndpointType: {{ $endpoint.vpcEndpointType | default "Interface" }}
                vpcIdSelector:
                  matchControllerRef: true
                tags:
                  Name: {{ $id }}-{{ $endpoint.serviceName }}
                  {{- if $spec.tags }}
                  {{ $spec.tags | toYaml | indent 6 }}
                  {{- end }}

            ---
            {{- range $i, $subnet := $spec.vpc.subnets }}
            {{- if or (eq $subnet.type "private") (eq $subnet.attachNatGateway true) }}
            {{- if eq $endpoint.vpcEndpointType "Gateway" }}

            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: VPCEndpointRouteTableAssociation
            metadata:
              name: {{ $id }}-{{ $endpoint.serviceName }}-{{ $subnet.availabilityZone }}
              labels:
                aws.livewyer.io/vpc: {{ $id }}
                vpcEndpoint: {{ $endpoint.serviceName }}
              annotations:
                {{ setResourceNameAnnotation (printf "vpce-gw-%s-%s" $endpoint.serviceName $subnet.availabilityZone) }}
            spec:
              deletionPolicy: {{ $spec.deletionPolicy }}
              providerConfigRef:
                name: {{ $spec.providerConfigRef.name }}
              forProvider:
                region: {{ $spec.vpc.region }}
                vpcEndpointIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    vpcEndpoint: {{ $endpoint.serviceName }}
                routeTableIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    subnetType: {{ $subnet.type }}
                    availabilityZone: {{ $subnet.availabilityZone }}

            ---
            {{- else }}

            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: VPCEndpointSubnetAssociation
            metadata:
              name: {{ $id }}-{{ $endpoint.serviceName }}-{{ $subnet.availabilityZone }}
              labels:
                aws.livewyer.io/vpc: {{ $id }}
                vpcEndpoint: {{ $endpoint.serviceName }}
              annotations:
                {{ setResourceNameAnnotation (printf "vpce-eni-%s-%s" $endpoint.serviceName $subnet.availabilityZone) }}
            spec:
              deletionPolicy: {{ $spec.deletionPolicy }}
              providerConfigRef:
                name: {{ $spec.providerConfigRef.name }}
              forProvider:
                region: {{ $spec.vpc.region }}
                vpcEndpointIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    vpcEndpoint: {{ $endpoint.serviceName }}
                subnetIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    subnetType: {{ $subnet.type }}
                    availabilityZone: {{ $subnet.availabilityZone }}

            ---
            {{- end }}
            {{- end }}
            {{- end }}
            {{- end }}

            apiVersion: {{ .observed.composite.resource.apiVersion }}
            kind: {{ .observed.composite.resource.kind }}
            status:
              {{- $vpcId := dig "resources" "vpc" "resource" "status" "atProvider" "id" "" $.observed }}
              {{- if $vpcId }}
              vpcId: {{ $vpcId }}
              {{- end }}

              {{- $subnetIds := list }}
              {{- range $i, $subnet := $spec.subnets }}
              {{- $subnetId := dig "resources" (printf "subnet-%s-%s" $subnet.type $subnet.availabilityZone) "resource" "metadata" "annotations" "crossplane.io/external-name" "" $.observed }}
              {{- if $subnetId }}
              {{- $subnetIds = append $subnetIds $subnetId }}
              {{- end }}
              {{- end }}
              {{- if $subnetIds }}
              subnetIds:
                {{- range $id := $subnetIds }}
                - {{ $id }}
                {{- end }}
              {{- end }}

              {{- $publicSubnetIds := list }}
              {{- range $i, $subnet := $spec.subnets }}
              {{- if eq $subnet.type "public" }}
              {{- $publicSubnetId := dig "resources" (printf "subnet-%s-%s" $subnet.type $subnet.availabilityZone) "resource" "metadata" "annotations" "crossplane.io/external-name" "" $.observed }}
              {{- if $publicSubnetId }}
              {{- $publicSubnetIds = append $publicSubnetIds $publicSubnetId }}
              {{- end }}
              {{- end }}
              {{- end }}
              {{- if $publicSubnetIds }}
              publicSubnetIds:
                {{- range $id := $publicSubnetIds }}
                - {{ $id }}
                {{- end }}
              {{- end }}

              {{- $privateSubnetIds := list }}
              {{- range $i, $subnet := $spec.subnets }}
              {{- if eq $subnet.type "private" }}
              {{- $privateSubnetId := dig "resources" (printf "subnet-%s-%s" $subnet.availabilityZone $subnet.type) "resource" "metadata" "annotations" "crossplane.io/external-name" "" $.observed }}
              {{- if $privateSubnetId }}
              {{- $privateSubnetIds = append $privateSubnetIds $privateSubnetId }}
              {{- end }}
              {{- end }}
              {{- end }}
              {{- if $privateSubnetIds }}
              privateSubnetIds:
                {{- range $id := $privateSubnetIds }}
                - {{ $id }}
                {{- end }}
              {{- end }}

              {{- $intraSubnetIds := list }}
              {{- range $i, $subnet := $spec.subnets }}
              {{- if eq $subnet.type "intra" }}
              {{- $intraSubnetId := dig "resources" (printf "subnet-%s-%s" $subnet.type $subnet.availabilityZone) "resource" "metadata" "annotations" "crossplane.io/external-name" "" $.observed }}
              {{- if $intraSubnetId }}
              {{- $intraSubnetIds = append $intraSubnetIds $intraSubnetId }}
              {{- end }}
              {{- end }}
              {{- end }}
              {{- if $intraSubnetIds }}
              intraSubnetIds:
                {{- range $id := $intraSubnetIds }}
                - {{ $id }}
                {{- end }}
              {{- end }}

              {{- $endpointIds := list }}
              {{- range $i, $endpoint := $spec.endpoints }}
              {{ $endpointId := dig "resources" (printf "endpoint-%s-%s" $endpoint.serviceName $endpoint.vpcEndpointType) "resource" "metadata" "annotations" "crossplane.io/external-name" "" $.observed }}
              {{- if $endpointId }}
              {{- $endpointIds = append $endpointIds $endpointId }}
              {{- end }}
              {{- end }}
              {{- if $endpointIds }}
              endpoints:
                {{- range $id := $endpointIds }}
                - {{ $id }}
                {{- end }}
              {{- end }}

            `}}
    - step: automatically-detect-readiness
      functionRef:
        name: function-auto-ready

{{- end }}
